// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartBank.Infra.Data.Repository.Context;

namespace SmartBank.Infra.Data.Repository.Migrations
{
    [DbContext(typeof(SmartBankContext))]
    [Migration("20210604043849_Migration_v0.0.0001")]
    partial class Migration_v000001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SmartBank.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 907, DateTimeKind.Local).AddTicks(7419))
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 901, DateTimeKind.Local).AddTicks(5724))
                        .HasColumnName("data_cadastro");

                    b.Property<string>("Cnh")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("cnh");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_nascimento");

                    b.Property<int>("Escolaridade")
                        .HasColumnType("integer")
                        .HasColumnName("escolaridade");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("nome");

                    b.Property<string>("NomeMae")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("nome_mae");

                    b.Property<string>("NomePai")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("nome_pai");

                    b.Property<string>("Rg")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("rg");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer")
                        .HasColumnName("sexo");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteBiometriaDigital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 965, DateTimeKind.Local).AddTicks(8328))
                        .HasColumnName("data_atualizacao");

                    b.Property<string>("BiometriaBase64")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("biometria_base64");

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 965, DateTimeKind.Local).AddTicks(7003))
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.Property<int>("Posicao")
                        .HasColumnType("integer")
                        .HasColumnName("posicao");

                    b.Property<string>("Probabilidade")
                        .HasColumnType("text")
                        .HasColumnName("propabilidade");

                    b.Property<int>("Similaridade")
                        .HasColumnType("integer")
                        .HasColumnName("similaridade");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("cliente_biometria_digital");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteSolicitacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 986, DateTimeKind.Local).AddTicks(4134))
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 986, DateTimeKind.Local).AddTicks(687))
                        .HasColumnName("data_cadastro");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("Data")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 974, DateTimeKind.Local).AddTicks(5570))
                        .HasColumnName("data");

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_aprovacao");

                    b.Property<DateTime?>("DataCancelamento")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_cancelamento");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("tipo");

                    b.Property<decimal>("ValorLiberado")
                        .HasColumnType("numeric")
                        .HasColumnName("valo_liberado");

                    b.Property<decimal>("ValorSolicitado")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_liberado");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("cliente_solicitacao");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteSolicitacaoPendecia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Atualizado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 995, DateTimeKind.Local).AddTicks(7069))
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTime>("Cadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 995, DateTimeKind.Local).AddTicks(6118))
                        .HasColumnName("data_cadastro");

                    b.Property<DateTime>("DataPendencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2021, 6, 4, 1, 38, 47, 992, DateTimeKind.Local).AddTicks(498))
                        .HasColumnName("data_pendencia");

                    b.Property<DateTime>("DataResolvida")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("data_resolvida");

                    b.Property<string>("Descricao")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("descricao");

                    b.Property<string>("Resolucao")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("resolucao");

                    b.Property<Guid>("SolicitacaoId")
                        .HasColumnType("uuid")
                        .HasColumnName("solicitacao_id");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<int>("Tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.HasIndex("SolicitacaoId");

                    b.ToTable("cliente_solicitacao_pendencia");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("SmartBank.Domain.ValuesObject.ClienteEmpresaValueObject", "EmpresaTrabalho", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cnpj")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("empresa_trabalho_cnpj");

                            b1.Property<string>("NomeFantasia")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("empresa_trabalho_nome_fantasia");

                            b1.Property<string>("RazaoSocial")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("empresa_trabalho_razao_social");

                            b1.HasKey("ClienteId");

                            b1.ToTable("cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");

                            b1.OwnsOne("SmartBank.Domain.ValuesObject.ContatoValueObject", "Contato", b2 =>
                                {
                                    b2.Property<Guid>("ClienteEmpresaValueObjectClienteId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Email")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_email");

                                    b2.Property<string>("TelefoneCelular")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_celular");

                                    b2.Property<string>("TelefoneFixo")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_telefone");

                                    b2.HasKey("ClienteEmpresaValueObjectClienteId");

                                    b2.ToTable("cliente");

                                    b2.WithOwner()
                                        .HasForeignKey("ClienteEmpresaValueObjectClienteId");
                                });

                            b1.OwnsOne("SmartBank.Domain.ValuesObject.EnderecoValueObject", "Endereco", b2 =>
                                {
                                    b2.Property<Guid>("ClienteEmpresaValueObjectClienteId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Bairro")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_bairro");

                                    b2.Property<string>("Cep")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_cep");

                                    b2.Property<string>("Cidade")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_cidade");

                                    b2.Property<int>("CodigoIBGE")
                                        .HasMaxLength(256)
                                        .HasColumnType("integer")
                                        .HasColumnName("empresa_trabalho_cidade_ibge");

                                    b2.Property<string>("Complemento")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_endereco_complemento");

                                    b2.Property<string>("Logradouro")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_endereco_logradouro");

                                    b2.Property<string>("Numero")
                                        .HasMaxLength(256)
                                        .HasColumnType("character varying(256)")
                                        .HasColumnName("empresa_trabalho_endereco_numero");

                                    b2.HasKey("ClienteEmpresaValueObjectClienteId");

                                    b2.ToTable("cliente");

                                    b2.WithOwner()
                                        .HasForeignKey("ClienteEmpresaValueObjectClienteId");
                                });

                            b1.Navigation("Contato");

                            b1.Navigation("Endereco");
                        });

                    b.OwnsOne("SmartBank.Domain.ValuesObject.ContatoValueObject", "Contato", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Email")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email");

                            b1.Property<string>("TelefoneCelular")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("telelefone_celular");

                            b1.Property<string>("TelefoneFixo")
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)")
                                .HasColumnName("telefone_fixo");

                            b1.HasKey("ClienteId");

                            b1.ToTable("cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("SmartBank.Domain.ValuesObject.EnderecoValueObject", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Bairro")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("endereco_bairro");

                            b1.Property<string>("Cep")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("endereco_cep");

                            b1.Property<string>("Cidade")
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("endereco_cidade");

                            b1.Property<int>("CodigoIBGE")
                                .HasColumnType("integer")
                                .HasColumnName("cidade_codigo_ibge");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("endreco_complemento");

                            b1.Property<string>("Logradouro")
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("endreco_logradouro");

                            b1.Property<string>("Numero")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("endreco_numero");

                            b1.HasKey("ClienteId");

                            b1.ToTable("cliente");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Contato");

                    b.Navigation("EmpresaTrabalho");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteBiometriaDigital", b =>
                {
                    b.HasOne("SmartBank.Domain.Entities.Cliente", "Cliente")
                        .WithMany("BiometriasDigital")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("fk_cliente__cliente_biometria_digital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteSolicitacao", b =>
                {
                    b.HasOne("SmartBank.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Solicitacoes")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("fk_cliente__cliente_solicitacoes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteSolicitacaoPendecia", b =>
                {
                    b.HasOne("SmartBank.Domain.Entities.ClienteSolicitacao", "Solicitacao")
                        .WithMany("Pendencias")
                        .HasForeignKey("SolicitacaoId")
                        .HasConstraintName("fk_solicitacao__pendencia_solicitacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitacao");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("BiometriasDigital");

                    b.Navigation("Solicitacoes");
                });

            modelBuilder.Entity("SmartBank.Domain.Entities.ClienteSolicitacao", b =>
                {
                    b.Navigation("Pendencias");
                });
#pragma warning restore 612, 618
        }
    }
}
